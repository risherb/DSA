class Solution {
    public int minGroups(int[][] intervals) {
List<int[]> events = new ArrayList<>();
        
        // For each interval, create two events: start (+1) and end (-1)
        for (int[] interval : intervals) {
            events.add(new int[]{interval[0], 1});  // Start of interval
            events.add(new int[]{interval[1] + 1, -1}); // End of interval (+1 to mark end after the interval)
        }
        
        // Sort events by time. If two events have the same time, process the end (-1) before the start (+1)
        events.sort((a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        
        int maxGroups = 0, currentGroups = 0;
        
        // Process each event
        for (int[] event : events) {
            currentGroups += event[1];  // Increment or decrement the number of active groups
            maxGroups = Math.max(maxGroups, currentGroups);  // Track the max number of groups
        }
        
        return maxGroups;
    }
}
